
; GCD of two numbers:
Wb%:aSaba

; Two quine strategies:
" X2RsC34.s" X2RsC34.s   Duplicate the string and replace each space with double quote followed by space
x:"x: xRsRPx"xRsRPx      Repr substitution, as in the standard Python quine

; First (a) Fibonacci numbers, starting w/ 1:
La{Po+:xSox}

; Arithmetic mean of input:
$+g/#g
; Explanation:
  g      List of cmdline args
   /#g   Divide each element of the list by the length of the list
$+       Sum the result (fold/plus)

; Three different ways to do factorial:
Fi1+,ao*:io   Iterative...
a?a*(fa-1)1   Recursive...
$*++,a        But fold is the best!

; FizzBuzz:
LhP(++i%3?x"Fizz").(i%5?x"Buzz")|i

; Translate alphanumeric phone numbers (http://codegolf.stackexchange.com/q/21327/16766):
{aEQ'z?9aGE'a?5*Aa//16-28a}Ma

; Is a number divisible by all of its digits? http://codegolf.stackexchange.com/q/41902/16766
0=$+a%^a
; Explanation:
      ^a   Split num (as string) into an array of its digits                              [1;2;8]  [2;0]  [3;2]
    a%     Take num mod each of those digits; if a digit is zero, the result will be nil  [0;0;0]  [0;u]  [2;0]
  $+       Sum the resulting list (note: summing a list containing nil results in nil!)   0        u      2
0=         Iff the sum equals 0, return 1 (true); otherwise (>0 or nil), return 0 (false) 1        0      0

; Build nested lists (http://codegolf.stackexchange.com/q/47351/16766):
a?--a?[0(fa)+1][0]l   20 bytes counting -p flag
; Explanation:
a?                l   If input is 0, return empty list
  --a?         [0]    Else decrement input; if it is now 0, return [0]
        (fa)+1        If --a was not 0, recurse and add 1 memberwise to the result...
      [0      ]       ... and make it the second item in a new outer list
; The recursive main function thus builds up lists like [0] -> [0;[1]] -> [0;[1;[2]]] etc.
